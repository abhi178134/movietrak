{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useRef } from 'react'; // API\n\nimport API from '../API';\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\nexport const useHomeFetch = () => {\n  _s();\n\n  const [searchTerm, setSearchTerm] = useState('');\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n  console.log(searchTerm);\n\n  const fetchMovies = async (page, searchTerm = '') => {\n    try {\n      setError(false);\n      setLoading(true);\n      const movies = await API.fetchMovies(searchTerm, page);\n      setState(prev => ({ ...movies,\n        results: page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n\n    setLoading(false);\n  }; // Initial & Search\n\n\n  useEffect(() => {\n    setState(initialState);\n    fetchMovies(1, searchTerm);\n  }, [searchTerm]);\n  useEffect(() => {\n    if (!isLoadingMore) return;\n    fetchMovies(state.page + 1, searchTerm);\n    setIsLoadingMore(false);\n  }, [isLoadingMore, searchTerm, state.page]);\n  return {\n    state,\n    loading,\n    error,\n    searchTerm,\n    setSearchTerm,\n    setIsLoadingMore\n  };\n};\n\n_s(useHomeFetch, \"hvHBsk3Yr0UrXI1ZLh53H6Iq/5I=\");","map":{"version":3,"sources":["/home/abhijeet/Desktop/GITHUB/movietrak/src/hooks/useHomeFetch.js"],"names":["useState","useEffect","useRef","API","initialState","page","results","total_pages","total_results","useHomeFetch","searchTerm","setSearchTerm","state","setState","loading","setLoading","error","setError","isLoadingMore","setIsLoadingMore","console","log","fetchMovies","movies","prev"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,MAA9B,QAA4C,OAA5C,C,CACA;;AACA,OAAOC,GAAP,MAAgB,QAAhB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,IAAI,EAAE,CADa;AAEnBC,EAAAA,OAAO,EAAE,EAFU;AAGnBC,EAAAA,WAAW,EAAE,CAHM;AAInBC,EAAAA,aAAa,EAAE;AAJI,CAArB;AAOA,OAAO,MAAMC,YAAY,GAAG,MAAM;AAAA;;AAChC,QAAM,CAACC,UAAD,EAAYC,aAAZ,IAA4BX,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAACI,YAAD,CAAlC;AACA,QAAM,CAACU,OAAD,EAAUC,UAAV,IAAwBf,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACgB,KAAD,EAAQC,QAAR,IAAoBjB,QAAQ,CAAC,KAAD,CAAlC;AACA,QAAM,CAACkB,aAAD,EAAgBC,gBAAhB,IAAoCnB,QAAQ,CAAC,KAAD,CAAlD;AAEAoB,EAAAA,OAAO,CAACC,GAAR,CAAYX,UAAZ;;AAEA,QAAMY,WAAW,GAAG,OAAOjB,IAAP,EAAaK,UAAU,GAAG,EAA1B,KAAiC;AACnD,QAAI;AACFO,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACAF,MAAAA,UAAU,CAAC,IAAD,CAAV;AAEA,YAAMQ,MAAM,GAAG,MAAMpB,GAAG,CAACmB,WAAJ,CAAgBZ,UAAhB,EAA4BL,IAA5B,CAArB;AAEAQ,MAAAA,QAAQ,CAACW,IAAI,KAAK,EAChB,GAAGD,MADa;AAEhBjB,QAAAA,OAAO,EACLD,IAAI,GAAG,CAAP,GAAW,CAAC,GAAGmB,IAAI,CAAClB,OAAT,EAAkB,GAAGiB,MAAM,CAACjB,OAA5B,CAAX,GAAkD,CAAC,GAAGiB,MAAM,CAACjB,OAAX;AAHpC,OAAL,CAAL,CAAR;AAKD,KAXD,CAWE,OAAOU,KAAP,EAAc;AACdC,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACD;;AACDF,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAhBD,CATgC,CA2BhC;;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACdY,IAAAA,QAAQ,CAAET,YAAF,CAAR;AACAkB,IAAAA,WAAW,CAAC,CAAD,EAAGZ,UAAH,CAAX;AACD,GAHQ,EAGN,CAACA,UAAD,CAHM,CAAT;AAKAT,EAAAA,SAAS,CAAC,MAAK;AACb,QAAG,CAACiB,aAAJ,EAAmB;AAEnBI,IAAAA,WAAW,CAACV,KAAK,CAACP,IAAN,GAAW,CAAZ,EAAcK,UAAd,CAAX;AACAS,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AAED,GANQ,EAMP,CAACD,aAAD,EAAeR,UAAf,EAA0BE,KAAK,CAACP,IAAhC,CANO,CAAT;AAQA,SAAO;AAAEO,IAAAA,KAAF;AAASE,IAAAA,OAAT;AAAkBE,IAAAA,KAAlB;AAAwBN,IAAAA,UAAxB;AAAmCC,IAAAA,aAAnC;AAAkDQ,IAAAA;AAAlD,GAAP;AACD,CA1CM;;GAAMV,Y","sourcesContent":["import { useState, useEffect, useRef } from 'react';\n// API\nimport API from '../API';\n\nconst initialState = {\n  page: 0,\n  results: [],\n  total_pages: 0,\n  total_results: 0\n};\n\nexport const useHomeFetch = () => {\n  const [searchTerm,setSearchTerm]= useState('');\n  const [state, setState] = useState(initialState);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(false);\n  const [isLoadingMore, setIsLoadingMore] = useState(false);\n\n  console.log(searchTerm);\n\n  const fetchMovies = async (page, searchTerm = '') => {\n    try {\n      setError(false);\n      setLoading(true);\n\n      const movies = await API.fetchMovies(searchTerm, page);\n\n      setState(prev => ({\n        ...movies,\n        results:\n          page > 1 ? [...prev.results, ...movies.results] : [...movies.results]\n      }));\n    } catch (error) {\n      setError(true);\n    }\n    setLoading(false);\n  };\n\n  // Initial & Search\n  useEffect(() => {\n    setState (initialState);\n    fetchMovies(1,searchTerm);\n  }, [searchTerm]);\n\n  useEffect(()=> {\n    if(!isLoadingMore) return;\n\n    fetchMovies(state.page+1,searchTerm);\n    setIsLoadingMore(false);\n\n  },[isLoadingMore,searchTerm,state.page])\n\n  return { state, loading, error,searchTerm,setSearchTerm, setIsLoadingMore};\n};\n"]},"metadata":{},"sourceType":"module"}